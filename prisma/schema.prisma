generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  password         String
  preferredAuthors String[]  @default([])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  sessions         Session[]
  stories          Story[]
  storyLikes       StoryLike[]
}

model Story {
  id          String    @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean   @default(false)
  likes       Int       @default(0)
  views       Int       @default(0)
  tags        String[]  @default([])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  likes_users StoryLike[]
}

model Chapter {
  id          String   @id @default(cuid())
  storyId     String
  order       Int
  content     String
  choices     Json     @default("[]")
  isGenerated Boolean  @default(false)
  promptUsed  String?
  createdAt   DateTime @default(now())
  story       Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, order])
}

model StoryLike {
  id      String @id @default(cuid())
  userId  String
  storyId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
}
