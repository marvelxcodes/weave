// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  credits       Int       @default(10) // Starting credits
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  stories       Story[]
  creditHistory CreditHistory[]
  likedStories  StoryLike[]
}

// Credit system
model CreditHistory {
  id          String      @id @default(cuid())
  userId      String
  amount      Int         // Positive for earned, negative for spent
  type        CreditType
  description String?
  storyId     String?     // If related to story generation
  createdAt   DateTime    @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  story Story? @relation(fields: [storyId], references: [id])
}

enum CreditType {
  EARNED
  SPENT
  BONUS
  REFUND
}

// Story management
model Story {
  id          String      @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean     @default(false)
  isComplete  Boolean     @default(false)
  tags        String[]    @default([])
  likes       Int         @default(0)
  views       Int         @default(0)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  author        User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  chapters      Chapter[]
  creditHistory CreditHistory[]
  likes_users   StoryLike[]
}

model Chapter {
  id        String         @id @default(cuid())
  storyId   String
  order     Int            // Chapter number
  content   String         @db.Text
  choices   Json?          // Store choices as JSON
  isGenerated Boolean      @default(false)
  promptUsed  String?      @db.Text
  createdAt DateTime       @default(now())

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([storyId, order])
}

model StoryLike {
  id      String @id @default(cuid())
  userId  String
  storyId String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
}
